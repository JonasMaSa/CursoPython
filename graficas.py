# -*- coding: utf-8 -*-
"""Graficas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DMCOhg-W754EqJyNwPyOt9ZVN1U1TATq
"""

#Graficas

#Funciones Explicitas

from sympy import symbols, sqrt, ln
from sympy.plotting import plot
def f(x):
    return sqrt(- x)
def g(x):
    return ln(x)

x = symbols('x')

plot(f(x));
plot(g(x));
plot(f(g(x)));
plot(g(f(x)));
plot(f(x)*g(x));

#Funciones Implicitas

from sympy import symbols, Eq
from sympy import plot_implicit
x, y = symbols('x y')

plot_implicit(Eq(x**2 + y**3 - 2*y, 3), (x, -10,10), (y, -10,10));

#Funciones Implicitas

from sympy import symbols, Eq
from sympy import plot_implicit
P, V = symbols('P V')

plot_implicit(Eq((P + (5/(V**2)))*(V - 0.03), 9.7), (P, -10,10), (V, -10,10));

#Funciones Parametricas
from sympy import symbols, cos, sin, pi
from sympy import plot_parametric

t = symbols('t')
def x(t):
  return cos(t) + ((1/2)*cos(7*t)) + ((1/3)*sin(17*t))

def y(t):
  return sin(t) + ((1/2)*sin(7*t)) + ((1/3)*cos(17*t))

plot_parametric(x(t), y(t), (t, 0, 14*pi));

#Funciones Parametricas
from sympy import symbols, cos, sin, pi
from sympy import plot_parametric

t = symbols('t')
def x(t):
  return cos(t) + (1/(2*cos(7*t))) + (1/(3*sin(17*t)))

def y(t):
  return sin(t) + (1/(2*sin(7*t))) + (1/(3*cos(17*t)))

plot_parametric(x(t), y(t), (t, 0, 14*pi));

#Funciones polares con cambio de coordenadas

import numpy as np
import matplotlib.pyplot as plt

theta = np.linspace(0, 2 * np.pi, 4000)

r = 6 * (1 + np.cos(theta))
x = r * np.cos(theta)
y = r * np.sin(theta)

plt.axis('off');
plt.axis('equal');
plt.plot(x,y);

#Funciones polares directas
import numpy as np
import matplotlib.pyplot as plt

theta = np.linspace(1, 4 * np.pi, 4000)

r = 6 * (1 + np.cos(theta));
plt.polar(theta, r, marker='+', color=(.2,.4,.5,.3));

plt.title('Cardioide');
plt.show();