# -*- coding: utf-8 -*-
"""Clase 270624.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RA5c1ZDA-5X_UjLBu4DlMGDfgB6N87Tf
"""

from sympy import symbols, Integral, sin

x = symbols('x')
intsen = Integral(sin(x), (x,-1,1))
print('El resultado es:', intsen.evalf())



from sympy import symbols, integrate, exp, oo

x = symbols('x')
intsen = Integral(sin(x), (x,-1,1))
print(integrate(exp(-x), (x,0,oo)))

#FuncionesExplicitas

from sympy import symbols, sin
from sympy.plotting import plot
x = symbols('x')

fx = 0
for i in range(4):
    fx = fx + sin(i*x)

print(fx)
plot(fx)

from sympy import symbols, sin, Abs
from sympy.plotting import plot
def f(x):
    return Abs(Abs(x)-1)
x = symbols('x')

plot(f(x))
plot(f(f(f(x))))
plot(f(x)*f(x), (x,-5,5), line_color='red')

#FuncionesImplicitas

from sympy import symbols, Eq
from sympy import plot_implicit
x, y = symbols('x y')

plot_implicit(Eq(x**4 - (x**2 - y**3), 0), (x, -10,10), (y, -10,10));

from sympy import sqrt, sin
from sympy import plot_implicit


plot_implicit(sin(x**5) + (x - 2*y**2) > 0, (x, -2,4), (y, -2,2));

#FuncionesParametricas

from sympy import symbols, cos, sin, exp, pi
from sympy import plot_parametric

t = symbols('t')
def x(t):
  return sin(t) * (exp(cos(t)) - 2 * cos(4 * t) - sin(t/12)**5)

def y(t):
  return cos(t) * (exp(cos(t)) - 2 * cos(4 * t) - sin(t/12)**5)

plot_parametric(x(t), y(t), (t, -6*pi, 6*pi));
plot_parametric(x(t), y(t), (t, -50, 50));

import numpy as np
import matplotlib.pyplot as plt

theta = np.linspace(0, 2 * np.pi, 4000)

r = 3 * np.cos(6 * theta)
x = r * np.cos(theta)
y = r * np.sin(theta)

plt.axis('off');
plt.axis('equal');
plt.plot(x,y);

import numpy as np
import matplotlib.pyplot as plt

theta = np.linspace(1, 4 * np.pi, 4000)

r = np.sqrt(3 * np.cos(2 * theta));
plt.polar(theta, r, marker='+', color=(.2,.4,.5,.3));

plt.title('Lemniscata');
plt.show();